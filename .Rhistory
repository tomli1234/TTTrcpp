install.packages('Rcpp')
library(TTTrcpp)
rcpp_hello()
library(TTTrcpp)
which_equal_C(1:3,1)
which_equal_C(1:3,2)
library(TTTrcpp)
timesTwo()
library(TTTrcpp)
check_which_state_2_C
library(TTTrcpp)
which_equal_C
which_equal_C{1:3,1_}
which_equal_C(1:3,2)
library(TTTrcpp)
library(TTTrcpp)
library(TTTrcpp)
library(TTTrcpp)
library(TTTrcpp)
library(TTTrcpp)
rotate_90_C(matrix(1:900, 30, 30))
library(TTTrcpp)
rotate_90_C(matrix(1:900, 30, 30))
remove.packages(TTTrcpp)
remove.packages('TTTrcpp')
library(TTTrcpp)
rotate_90_C(matrix(1:900, 30, 30))
library(TTTrcpp)
rotate_90_C(matrix(1:900, 30, 30))
library(TTTrcpp)
rotate_90_C
rotate_90_C(matrix(1:900, 30, 30))
which_equal_C(1:3, 2)
which_equal_C
library(TTTrcpp)
rotate_90_C
rotate_90_C(matrix(1:900, 30, 30))
rotate_90_C
library(TTTrcpp)
rotate_90_C(matrix(1:900, 30, 30))
rotate_90_C
which_equal_C
learn_progress_C
library(TTTrcpp)
learn_progress_C
which_equal_C(1:10,4)
rotate_90_C
rotate_90_C(matrix(1:900, 30, 30))
rotate_90_C(matrix(1:900, 30, 30))
rotate_90_C(matrix(1:900, 30, 30))
library(TTTrcpp)
reflect_row_C(matrix(1:9, 3, 3))
library(TTTrcpp)
reflect_row_C(matrix(1:9, 3, 3))
rotate_90_C(matrix(1:9, 3, 3))
rotate_90_C(rotate_90_C(matrix(1:9, 3, 3)))
rotate_90_C(reflect_row_C(matrix(1:9, 3, 3)))
library(TTTrcpp)
check_status_C
library(TTTrcpp)
library(TTTrcpp)
library(TTTrcpp)
library(TTTrcpp)
library(TTTrcpp)
library(TTTrcpp)
library(TTTrcpp)
